'.source.php':
  'Clear Recurring Event':
    'prefix': 'clear_event'
    'body': 'wp_clear_scheduled_hook(\'${1:recurring_event_action}\');'
  'Clear Scheduled Event':
    'prefix': 'clear_scheduled'
    'body': 'if (($next_run = wp_next_scheduled(\'${1:event_action}\')) !== false) {\n\twp_unschedule_event($next_run,\'$1\');\n}'
  'Custom Post Type: Admin Messages':
    'prefix': 'cptm'
    'body': '/**\n * Registers admin messages for a custom post type\n *\n * @see wp-admin/edit-form-advanced.php for \\$messages format\n */\nfunction ${1:my_post_type_messages}($messages) {\n\t\\$messages[\'${2:custom-post-type-id}\'] = array(\n\t\t1 => sprintf(__(\'${3:Post Type Name} updated. <a href="%s">View book</a>\', \'${4:my_plugin_text_domain}\'), esc_url(get_permalink(\\$post_ID))),\n\t\t2 => \\$messages[\'post\'][2],\n\t\t3 => \\$messages[\'post\'][3],\n\t\t4 => __(\'$3 updated.\', \'$4\'),\n\t\t5 => isset(\\$_GET[\'revision\']) ? sprintf( __(\'Book restored to revision from %s\', \'$4\'), wp_post_revision_title((int) \\$_GET[\'revision\'], false)) : false,\n\t\t6 => sprintf(__(\'$3 published. <a href="%s">View $3</a>\', \'$4\'), esc_url(get_permalink(\\$post_ID))),\n\t\t7 => __(\'Book saved.\', \'$4\'),\n\t\t8 => sprintf(__(\'$3 submitted. <a target="_blank" href="%s">Preview $3</a>\', \'$4\'), esc_url(add_query_arg(\'preview\', \'true\', get_permalink(\\$post_ID)))),\n\t\t9 => sprintf(__(\'$3 scheduled for: <strong>%1$s</strong>. <a target="_blank" href="%2$s">Preview $3</a>\', \'$4\'),\n\t\t\tdate_i18n(__(\'M j, Y @ G:i\'), strtotime(\\$post->post_date)),\n\t\t\tesc_url( get_permalink(\\$post_ID))),\n\t\t10 => sprintf(__(\'$3 draft updated. <a target="_blank" href="%s">Preview $3</a>\', \'$4\'), esc_url(add_query_arg(\'preview\', \'true\', get_permalink(\\$post_ID))))\n\t);\n\treturn \\$messages;\n}\nadd_filter(\'post_updated_messages\', \'$1\');'
  'Custom Post Type: Register':
    'prefix': 'cptr'
    'body': 'function ${1:registration_func_name}() {\n\n\t/**\n\t * Register a custom post type\n\t * \n\t * Supplied is a "reasonable" list of defaults\n\t * @see register_post_type for full list of options for register_post_type\n\t * @see add_post_type_support for full descriptions of \'supports\' options\n\t * @see get_post_type_capabilities for full list of available fine grained capabilities that are supported\n\t */\n\tregister_post_type(\'${2:post_type}\', array( \n\t\t${3:\'labels\' => array(\n\t\t\t\'name\' => __(\'${4:name}\'${5:, \'${6:localisation_domain}\'}),\n\t\t\t\'singular_name\' => __(\'${7:singular-name}\'$5)\n\t\t),}\n\t\t${8:\'description\' => __(\'${9:description}\'$5),}\n\t\t${10:\'public\' => ${11:true},}\n\t\t${12:\'exclude_from_search\' => ${13:null},}\n\t\t${14:\'publicly_queryable\' => ${15:null},}\n\t\t${16:\'show_ui\' => ${17:true},}\n\t\t${18:\'show_in_nav_menus\' => ${19:null},}\n\t\t${20:\'hierarchical\' => ${21:false},}\n\t\t${22:\'supports\' => array(\n\t\t\t${23:\'title\',}\n\t\t\t${24:\'editor\',}\n\t\t\t${25:\'comments\',}\n\t\t\t${26:\'revisions\',}\n\t\t\t${27:\'trackbacks\',}\n\t\t\t${28:\'author\',}\n\t\t\t${29:\'excerpt\',}\n\t\t\t${30:\'page-attributes\',}\n\t\t\t${31:\'thumbnail\',}\n\t\t\t${32:\'custom-fields\'}\n\t\t),}\n\t\t${33:\'taxonomies\' => array(\n\t\t\t${34:\'post_tag\',}\n\t\t\t${35:\'category\',}\n\t\t),}\n\t\t${36:\'capability_type\' => \'${37:post}\',}\n\t\t${38:\'capabilities\' => array(\n\t\t\t// for fine grained control include valid capabilities here\n\t\t\t// if left empty \'capability_type\' will define editing capability requirements\n\t\t),}\n\t));\n}\nadd_action(\'init\', \'$1\');'
  'Include Template File':
    'prefix': 'templatepath'
    'body': 'include(TEMPLATEPATH . \'/$0\');'
  'Plugin Head':
    'prefix': 'plugin_head'
    'body': '/*\nPlugin Name: ${1:Plugin Name}\nPlugin URI: ${2:http://example.com/}\nDescription: ${3:Description}\nVersion: ${4:0.1}\nAuthor: ${5:Your Name}\nAuthor URI: ${6:http://example.com/} \n*/\n\n/**\n * ${7:Copyright (c) ${8:`date "+%Y"`} ${9:${5}}}. All rights reserved.\n *\n * Released under the GPL license\n * http://www.opensource.org/licenses/gpl-license.php\n *\n * This is an add-on for WordPress\n * http://wordpress.org/\n *\n * **********************************************************************\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * **********************************************************************\n */\n\n$0'
  'Plugin Readme':
    'prefix': 'readme'
    'body': '=== ${1:Plugin Name} ===\nContributors: ${2:wordpress.org_username}\nDonate link: ${3:url}\nTags: ${4:tags}\nRequires at least: ${5:version_number}\nTested up to: ${6:version_number}\nStable tag: ${7:stable_tag}\n \n${8:Here is a short description of the plugin.  This should be no more than 150 chars.  No markup here.}\n\n== Description ==\n\nThis is the long description.  No limit, and you can use Markdown (as well as in the following sections).\n\nFor backwards compatibility, if this section is missing, the full length of the short description will be used, and\nMarkdown parsed.\n\nA few notes about the sections above:\n\n*   "Contributors" is a comma separated list of wp.org/wp-plugins.org usernames\n*   "Tags" is a comma separated list of tags that apply to the plugin\n*   "Requires at least" is the lowest version that the plugin will work on\n*   "Tested up to" is the highest version that you\'ve *successfully used to test the plugin*. Note that it might work on\nhigher versions... this is just the highest one you\'ve verified.\n*   Stable tag should indicate the Subversion "tag" of the latest stable version, or "trunk," if you use \\`/trunk/\\` for\nstable.\n\n    Note that the \\`readme.txt\\` of the stable tag is the one that is considered the defining one for the plugin, so\nif the \\`/trunk/readme.txt\\` file says that the stable tag is \\`4.3\\`, then it is \\`/tags/4.3/readme.txt\\` that\'ll be used\nfor displaying information about the plugin.  In this situation, the only thing considered from the trunk \\`readme.txt\\`\nis the stable tag pointer.  Thus, if you develop in trunk, you can update the trunk \\`readme.txt\\` to reflect changes in\nyour in-development version, without having that information incorrectly disclosed about the current stable version\nthat lacks those changes -- as long as the trunk\'s \\`readme.txt\\` points to the correct stable tag.\n\n    If no stable tag is provided, it is assumed that trunk is stable, but you should specify "trunk" if that\'s where\nyou put the stable version, in order to eliminate any doubt.\n\n== Installation ==\n\nThis section describes how to install the plugin and get it working.\n\ne.g.\n\n1. Upload \\`plugin-name.php\\` to the \\`/wp-content/plugins/\\` directory\n1. Activate the plugin through the \'Plugins\' menu in WordPress\n1. Place \\`<?php do_action(\'plugin_name_hook\'); ?>\\` in your templates\n\n== Frequently Asked Questions ==\n\n= A question that someone might have =\n\nAn answer to that question.\n\n= What about foo bar? =\n\nAnswer to foo bar dilemma.\n\n== Screenshots ==\n\n1. This screen shot description corresponds to screenshot-1.(png|jpg|jpeg|gif). Note that the screenshot is taken from\nthe directory of the stable readme.txt, so in this case, \\`/tags/4.3/screenshot-1.png\\` (or jpg, jpeg, gif)\n2. This is the second screen shot\n\n== Changelog ==\n\n= 1.0 =\n* A change since the previous version.\n* Another change.\n\n= 0.5 =\n* List versions from most recent at top to oldest at bottom.\n\n== Upgrade Notice ==\n\n= 1.0 =\nUpgrade notices describe the reason a user should upgrade.  No more than 300 characters.\n\n= 0.5 =\nThis version fixes a security related bug.  Upgrade immediately.\n\n== Arbitrary section ==\n\nYou may provide arbitrary sections, in the same format as the ones above.  This may be of use for extremely complicated\nplugins where more information needs to be conveyed that doesn\'t fit into the categories of "description" or\n"installation."  Arbitrary sections will be shown below the built-in sections outlined above.\n\n== A brief Markdown Example ==\n\nOrdered list:\n\n1. Some feature\n1. Another feature\n1. Something else about the plugin\n\nUnordered list:\n\n* something\n* something else\n* third thing\n\nHere\'s a link to [WordPress](http://wordpress.org/ "Your favorite software") and one to [Markdown\'s Syntax Documentation][markdown syntax].\nTitles are optional, naturally.\n\n[markdown syntax]: http://daringfireball.net/projects/markdown/syntax\n            "Markdown is what the parser uses to process much of the readme file"\n\nMarkdown uses email style notation for blockquotes and I\'ve been told:\n> Asterisks for *emphasis*. Double it up  for **strong**.\n\n\\`<?php code(); // goes in backticks ?>\\`'
  'Register Schedule':
    'prefix': 'register_schedule'
    'body': '/**\n * Register a new Cron Schedule\n *\n * \'interval\' - time in seconds between each time the schedule is run\n * \'display\' - friendly description of the interval\n *\n * @param array $schedules\n * @return array\n */\nfunction ${1:register_my_schedule}(\\$schedules) {\n\t// remember, we\'re adding to the array, not replacing it\n\t\\$schedules[\'${2:string quarter_hour}\'] = array(\n\t\t\'interval\' => ${3:900},\n\t\t\'display\' => _(\'${4:Every 15 Minutes}\')\n\t);$0\n\treturn \\$schedules;\n}\nadd_filter(\'cron_schedules\', \'$1\');'
  'Register Sidebar':
    'prefix': 'registersidebar'
    'body': 'register_sidebar(array(\n\t\'name\' => \'${1:Sidebar 1}\',\n\t\'id\' => \'${2:sidebar-1}\',\n\t\'description\' => \'${3:}\',\n\t\'before_widget\' => \'${4:<li id="%1\\$s" class="widget %2\\$s">}\',\n\t\'after_widget\' => "${5:</li>\\n}",\n\t\'before_title\' => \'${6:<h2 class="widgettitle">}\',\n\t\'after_title\' => "${7:</h2>\\n}"\n));\n\n$0'
  'Schedule Recurring Event':
    'prefix': 'schedule_event'
    'body': '/**\n * Action to run event on\n * Doesn\'t need to be an existing WordPress action\n *\n * @param string - name of action\n * @param string - name of function to run on this action\n */\nadd_action(\'${1:event_action}\', \'${2:event_function}\');\n\n/**\n * Function to be called when event is fired\n *\n * @return void\n */\nfunction $2() {\n\t${0:// do neat stuff here}\n}\n\n/**\n * Schedule the event\n *\n * @param int - unix timestamp of when to run the event\n * @param string - action to fire at the timestamp\n */\nwp_schedule_event(${3:timestamp}, \'${4:frequency}\', \'$1\'); '
  'Shortcode':
    'prefix': 'shortcode'
    'body': 'function ${2:func_name}(\\$atts) {\n\t\\$atts = extract(shortcode_atts(array(\'default\'=>\'values\'),\\$atts));\n\t\n\t// do shortcode actions here\n}\nadd_shortcode(\'${1:shortcode-id}\',\'${2:func_name}\');'
  'The Loop (PHP)':
    'prefix': 'theloop'
    'body': 'if( have_posts() ) {\n\twhile ( have_posts() ) {\n\t\tthe_post();\n\t\t${1:/* Post */}\n\t}\n} else {\n\t${0:/* No posts found */}\n}'
  'Widget Template':
    'prefix': 'widget'
    'body': '/**\n * new WordPress Widget format\n * Wordpress 2.8 and above\n * @see http://codex.wordpress.org/Widgets_API#Developing_Widgets\n */\nclass ${1:PREFIX_Name}_Widget extends WP_Widget {\n\t\n    /**\n     * Constructor\n     *\n     * @return void\n     **/\n\tfunction $1_Widget() {\n\t\t\\$widget_ops = array( \'classname\' => \'${2:CSS class name}\', \'description\' => \'${3:Description}\' );\n\t\t\\$this->WP_Widget( \'$2\', \'${4:Title}\', \\$widget_ops );\n\t}\n\n    /**\n     * Outputs the HTML for this widget.\n     *\n     * @param array $args An array of standard parameters for widgets in this theme \n     * @param array $instance An array of settings for this widget instance \n     * @return void Echoes it\'s output\n     **/\n\tfunction widget( \\$args, \\$instance ) {\n\t\textract( \\$args, EXTR_SKIP );\n\t\techo \\$before_widget;\n\t\techo \\$before_title;\n\t\techo \'$4\'; // Can set this with a widget option, or omit altogether\n\t\techo \\$after_title;\n\n\t\t//\n\t\t// Widget display logic goes here\n\t\t//\n\n\t\techo \\$after_widget;\n\t}\n\n    /**\n     * Deals with the settings when they are saved by the admin. Here is\n     * where any validation should be dealt with.\n     *\n     * @param array $new_instance An array of new settings as submitted by the admin\n     * @param array $old_instance An array of the previous settings \n     * @return array The validated and (if necessary) amended settings\n     **/\n\tfunction update( \\$new_instance, \\$old_instance ) {\n\t\t// update logic goes here\n\t\t\\$updated_instance = \\$new_instance;\n\t\treturn \\$updated_instance;\n\t}\n\n    /**\n     * Displays the form for this widget on the Widgets page of the WP Admin area.\n     *\n     * @param array $instance An array of the current settings for this widget\n     * @return void Echoes it\'s output\n     **/\n\tfunction form( \\$instance ) {\n\t\t\\$instance = wp_parse_args( (array) \\$instance, array( ${5:array of option_name => value pairs} ) );\n\n\t\t// display field names here using:\n\t\t// \\$this->get_field_id(\'option_name\') - the CSS ID\n\t\t// \\$this->get_field_name(\'option_name\') - the HTML name\n\t\t// \\$instance[\'option_name\'] - the option value\n\t}\n}\n\nadd_action( \'widgets_init\', create_function( \'\', "register_widget(\'$1_Widget\');" ) );'
  'Register Single Event':
    'prefix': 'register_event'
    'body': '/**\n * Action to run event on\n * Doesn\'t need to be an existing WordPress action\n *\n * @param string - name of action\n * @param string - name of function to run on this action\n */\nadd_action(\'${1:event_action}\', \'${2:event_function}\');\n\n/**\n * Function to be called when event is fired\n *\n * @return void\n */\nfunction $2() {\n\t${0:// do neat stuff here}\n}\n\n/**\n * Schedule the event\n *\n * @param int - unix timestamp of when to run the event\n * @param string - action to fire at the timestamp\n */\nwp_schedule_single_event(${timestamp:time()}, \'${1}\'); '
  'wp_list_pages':
    'prefix': 'wp_list_pages'
    'body': 'wp_list_pages(${1:array(${2:\'depth\' => ${3:1},}${4:\'sort_column\' => ${5:\'${6:menu_order}\'},}${7:\'title_li\' => ${8:\'${9:}\'}})})$0'
'.text.html':
  'Comment Form Template':
    'prefix': 'commentform'
    'body': '<?php if (\'open\' == \\$post->comment_status) : ?>\n\n\t<div id="respond">\n\n\t\t<h3><?php comment_form_title(); ?></h3>\n\n\t\t<?php cancel_comment_reply_link(); ?>\n\n\t\t<?php if ( get_option(\'comment_registration\') && !\\$user_ID ) : ?>\n\t\t\t\n\t\t\t<p>You must be <a href="<?php echo wp_login_url(get_permalink()); ?>">logged in</a> to post a comment.</p>\n\t\t\t\n\t\t<?php else : ?>\n\n\t\t\t<form action="<?php echo get_option(\'siteurl\'); ?>/wp-comments-post.php" method="post" id="commentform">\n\n\t\t\t<?php if ( \\$user_ID ) : ?>\n\n\t\t\t\t<p>Logged in as <a href="<?php echo get_option(\'siteurl\'); ?>/wp-admin/profile.php"><?php echo \\$user_identity; ?></a>. <a href="<?php echo wp_logout_url(get_permalink()); ?>" title="Log out of this account">Log out &raquo;</a></p>\n\n\t\t\t<?php else : ?>\n\n\t\t\t\t<p>\n\t\t\t\t\t<input type="text" name="author" id="author" value="<?php echo \\$comment_author; ?>" size="22" tabindex="1" <?php if (\\$req) echo "aria-required=\'true\'"; ?> />\n\t\t\t\t\t<label for="author">Name <?php if (\\$req) echo "(required)"; ?></label>\n\t\t\t\t</p>\n\n\t\t\t\t<p>\n\t\t\t\t\t<input type="text" name="email" id="email" value="<?php echo \\$comment_author_email; ?>" size="22" tabindex="2" <?php if (\\$req) echo "aria-required=\'true\'"; ?> />\n\t\t\t\t\t<label for="email">Email (<?php if (\\$req) echo "required, "; ?>never shared)</label>\n\t\t\t\t</p>\n\n\t\t\t\t<p>\n\t\t\t\t\t<input type="text" name="url" id="url" value="<?php echo \\$comment_author_url; ?>" size="22" tabindex="3" />\n\t\t\t\t\t<label for="url">Website</label>\n\t\t\t\t</p>\n\n\t\t\t<?php endif; ?>\n\n\t\t\t<p><textarea name="comment" id="comment" cols="100%" rows="10" tabindex="4"></textarea></p>\n\n\t\t\t<p>Some HTML is ok: <code><?php echo allowed_tags(); ?></code></p>\n\n\t\t\t<p><input name="submit" type="submit" id="submit" tabindex="5" value="Submit Comment" /></p>\n\t\t\t<?php do_action(\'comment_form\', \\$post->ID); comment_id_fields(); ?>\n\n\t\t</form>\n\n\t<?php endif; // If registration required and not logged in ?>\n</div>\n\n<?php endif; // If comments are open: delete this and the sky will fall on your head ?>'
  'Comment Template':
    'prefix': 'comment'
    'body': '<div id="comment-<?php comment_ID(); ?>" <?php comment_class(\'hentry\'); ?>>\n\t\n\t<address class="vcard author entry-title">\n\t\t\n\t\t<?php if (function_exists(\'get_avatar\')) { echo get_avatar(\\$comment, 48); } ?>\n\t\t\n\t\t<cite class="n"><?php comment_author_link(); ?></cite>\n\t\t\n\t</address>\n\t\n\t<div class="entry-content">\n\n\t\t<?php if (\\$comment->comment_approved == \'0\') : ?>\n\t\t<p class="notification"><em><?php _e(\'Your comment is awaiting moderation\'); ?></em></p>\n\t\t<?php endif; ?>\n\t\t\n\t\t<?php comment_text(); ?>\n\n\t</div>\n\t\n\t<a rel="bookmark" href="<?php echo htmlspecialchars(get_comment_link( \\$comment->comment_ID )); ?>"><abbr class="published" title="<?php comment_time(\'Y-m-d\\TH:i\'); ?>"><?php comment_date(); ?> @ <?php comment_time(); ?></abbr></a>\n\t\n\t<?php if (function_exists(\'comment_reply_link\')) { comment_reply_link(array_merge( \\$args, array(\'respond_id\' => \'respond\', \'depth\' => \\$depth, \'max_depth\' => \\$args[\'max_depth\'])), \\$comment, \\$post); } ?>\n\t\n\t<?php edit_comment_link(); ?>\n\n</div>'
  'Post Template':
    'prefix': 'post'
    'body': '<div id="post-<?php the_ID(); ?>" <?php post_class(); ?>>\n\n\t<h1 class="entry-title"><a title="Permanent link to <?php the_title_attribute(); ?>" rel="bookmark" href="<?php the_permalink(); ?>"><?php the_title(); ?></a></h1>\n\t\n\t<div class="entry-content">\n\t\t<?php\n\t\t\tthe_content(__(\'Continued&hellip;\'));\n\t\t\twp_link_pages();\n\t\t?>\n\t</div>\n\t\n\t<?php the_tags(); ?>\n\t\n\t<?php the_category(); ?>\n\t\n\t<address class="vcard author">\n\t\t<span class="n"><?php the_author(); ?></span>\n\t</address>\n\t\n\t<abbr class="published" title="<?php the_time(\'Y-m-d\\TH:i\'); ?>"><?php the_date(); ?> @ <?php the_time(); ?></abbr>\n\t\n\t<a href="<?php trackback_url(); ?>"><?php _e(\'Trackback URL\'); ?></a>\n\n\t<?php comments_popup_link(); ?>\n\t\n\t<?php edit_post_link(); ?>\n</div>'
  'Sidebar Template':
    'prefix': 'sidebar'
    'body': '<?php // Dynamic Sidebar\nif ( !function_exists(\'dynamic_sidebar\') || !dynamic_sidebar(\'${1:Sidebar Name}\') ) : ?>\n\n\t${0:<!-- Sidebar fallback content -->}\n\n<?php endif; // End Dynamic Sidebar $1 ?>'
  'The Loop':
    'prefix': 'theloop'
    'body': '<?php if ( have_posts() ) : while ( have_posts() ) : the_post(); ?>\n\t${1:<!-- post -->}\n<?php endwhile; ?>\n\t${2:<!-- post navigation -->}\n<?php else: ?>\n\t${0:<!-- no posts found -->}\n<?php endif; ?>'
'.text, .text.css':
  'Theme Head':
    'prefix': 'theme_head'
    'body': '/*\nTheme Name: ${1:Theme Name}\nTheme URI: ${2:http://example.com/}\nDescription: ${3:Description}\nVersion: ${4:1.0}\nAuthor: ${5:Your Name}\nAuthor URI: ${6:http://example.com/}\nTags: ${7:one, two}\n*/\n\n$0'
'.source.php, .text':
  'WP Config (complete)':
    'prefix': 'wp-config'
    'body': '<?php\n/** \n * The base configurations of the WordPress.\n *\n * This file has the following configurations: MySQL settings, Table Prefix,\n * Secret Keys, WordPress Language, and ABSPATH. You can find more information by\n * visiting {@link http://codex.wordpress.org/Editing_wp-config.php Editing\n * wp-config.php} Codex page. You can get the MySQL settings from your web host.\n *\n * This file is used by the wp-config.php creation script during the\n * installation. You don\'t have to use the web site, you can just copy this file\n * to "wp-config.php" and fill in the values.\n *\n * @package WordPress\n */\n\n// ** MySQL settings - You can get this info from your web host ** //\n/** The name of the database for WordPress */\ndefine(\'DB_NAME\', \'${1:putyourdbnamehere}\');\n\n/** MySQL database username */\ndefine(\'DB_USER\', \'${2:usernamehere}\');\n\n/** MySQL database password */\ndefine(\'DB_PASSWORD\', \'${3:yourpasswordhere}\');\n\n/** MySQL hostname */\ndefine(\'DB_HOST\', \'${4:localhost}\');\n\n/** Database Charset to use in creating database tables. */\ndefine(\'DB_CHARSET\', \'${5:utf8}\');\n\n/** The Database Collate type. Don\'t change this if in doubt. */\ndefine(\'DB_COLLATE\', \'${6}\');\n\n/** \n * Enable Multisite Network\n *\n * Enable this constant to convert your single site WordPress instance in to a Multisite Network.\n * If you are upgrading from WordPress MU you can skip this step as your network is already enabled.\n **/\n//define(\'WP_ALLOW_MULTISITE\', true);\n\n/**#@+\n * Authentication Unique Keys.\n *\n * Change these to different unique phrases!\n * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/ WordPress.org secret-key service}\n * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.\n *\n * @since 2.6.0\n */\ndefine(\'AUTH_KEY\', \'${7:put your unique phrase here}\');\ndefine(\'SECURE_AUTH_KEY\', \'${8:put your unique phrase here}\');\ndefine(\'LOGGED_IN_KEY\', \'${9:put your unique phrase here}\');\ndefine(\'NONCE_KEY\', \'${10:put your unique phrase here}\');\n/**#@-*/\n\n/**\n * WordPress Database Table prefix.\n *\n * You can have multiple installations in one database if you give each a unique\n * prefix. Only numbers, letters, and underscores please!\n */\n\\$table_prefix  = \'${11:wp_}\';\n\n/**\n * WordPress Localized Language, defaults to English.\n *\n * Change this to localize WordPress.  A corresponding MO file for the chosen\n * language must be installed to wp-content/languages. For example, install\n * de.mo to wp-content/languages and set WPLANG to \'de\' to enable German\n * language support.\n */\ndefine(\'WPLANG\', \'${12}\');\n\n/**\n * WordPress Site URL\n *\n * WP_SITEURL, defined since WordPress Version 2.2, allows the WordPress address (URL) \n * to be defined. The valued defined is the address where your WordPress core files reside. \n * It should include the http:// part too. Do not put a slash "/" at the end. Setting this \n * value in wp-config.php overrides the wp_options table value for siteurl and disables the \n * WordPress address (URL) field in the Administration > Settings > General panel.\n */\n// define(\'WP_SITEURL\', \'http://\' . \\$_SERVER[\'SERVER_NAME\'] . \'/path/to/wordpressp\');\n\n/**\n * WordPress HOME\n *\n * WP_HOME is another wp-config.php option added in WordPress Version 2.2. Similar to WP_SITEURL, \n * WP_HOME overrides the wp_options table value for home but does not change it permanently. home \n * is the address you want people to type in their browser to reach your WordPress blog. It should \n * include the http:// part. Also, do not put a slash "/" at the end.\n */\n// define(\'WP_HOME\',    \'http://\' . \\$_SERVER[\'HTTP_HOST\'] . \'/path/to/wordpress\');\n\n/**\n * WordPress Content Dir\n * Since Version 2.6, you can move the wp-content directory, which holds your themes, plugins, and \n * uploads, outside of the WordPress application directory.\n *\n * Set WP_CONTENT_DIR to the full local path of this directory (no trailing slash), e.g.\n * Set WP_CONTENT_URL to the full URI of this directory (no trailing slash), e.g.\n */\n// define(\'WP_CONTENT_DIR\', \\$_SERVER[\'DOCUMENT_ROOT\'] . \'/blog/wp-content\' );\n// define(\'WP_CONTENT_URL\', \'http://\'.\\$_SERVER[\'SERVER_NAME\'].\'/blog/wp-content\');\n\n/**\n * WordPress Plugin Dir\n *\n * Set WP_PLUGIN_DIR to the full local path of this directory (no trailing slash), e.g.\n * Set WP_PLUGIN_URL to the full URI of this directory (no trailing slash), e.g.\n */\n// define(\'WP_PLUGIN_DIR\', \\$_SERVER[\'DOCUMENT_ROOT\'] . \'/blog/wp-content/plugins\' );\n// define(\'WP_PLUGIN_URL\', \'http://example/blog/wp-content/plugins\');\n\n// If you have compability issues with plugins Set PLUGINDIR to the full local path of this directory (no trailing slash), e.g.\n// define(\'PLUGINDIR\', \\$_SERVER[\'DOCUMENT_ROOT\'] . \'/blog/wp-content/plugins\' );\n\n/**\n * AutoSave Interval\n * \n * When editing a post, WordPress uses Ajax to auto-save revisions to the post as you edit. \n * You may want to increase this setting for longer delays in between auto-saves, or decrease \n * the setting to make sure you never lose changes. The default is 60 seconds.\n */\n// define(\'AUTOSAVE_INTERVAL\', 160 );  // seconds\n\n/**\n * Post Revisions\n * \n * WordPress, by default, will save copies of each edit made to a post or page, allowing the \n * possibility of reverting to a previous version of that post or page. The saving of revisions \n * can be disabled, or a maximum number of revisions per post or page can be specified.\n */\n// define(\'WP_POST_REVISIONS\', 3); // Set to false to disable\n\n/**\n * Cookie Domain\n *\n * The domain set in the cookies for WordPress can be specified for those with unusual domain setups. \n * One reason is if subdomains are used to serve static content. To prevent WordPress cookies from \n * being sent with each request to static content on your subdomain you can set the cookie domain to \n * your non-static domain only.\n */\n// define(\'COOKIE_DOMAIN\', \'www.askapache.com\');\n\n/**\n * Debug\n * \n * The WP_DEBUG option, added in WordPress Version 2.3.1, controls the display of some errors and warnings. \n * If this setting is absent from wp-config.php, then the value is assumed to be false.\n *\n * Additionally, if you are planning on modifying some of WordPress\' built-in JavaScript, you should enable SCRIPT_DEBUG\n */\n// define(\'WP_DEBUG\', false);\n// define(\'SCRIPT_DEBUG\', true);\n\n/**\n * Admin Script Concatenation\n * \n * To result in a faster administration area, all Javascript files are concatenated into one URL. If \n * Javascript is failing to work in your administration area, you can try disabling this feature.\n */\n// define(\'CONCATENATE_SCRIPTS\', false);\n\n/**\n * Error Logging\n *\n * Because wp-config.php is loaded for every page view not loaded from a cache file, it is an excellent \n * location to set php ini settings that control your php installation. This is useful if you don\'t \n * have access to a php.ini file, or if you just want to change some settings on the fly.\n */\n// @ini_set(\'log_errors\',\'On\');\n// @ini_set(\'display_errors\',\'Off\');\n// @ini_set(\'error_log\',\'/home/example.com/logs/php_error.log\');\n\n/**\n * Memory Allocation\n * \n * Also released with Version 2.5, the WP_MEMORY_LIMIT option allows you to specify the maximum amount \n * of memory that can be consumed by PHP. This setting may be necessary in the event you receive a message \n * such as "Allowed memory size of xxxxxx bytes exhausted".\n *\n * This setting increases PHP Memory only for WordPress, not other applications. By default, WordPress \n * will attempt to increase memory allocated to PHP to 32MB (code is at beginning of wp-settings.php), so \n * the setting in wp-config.php should reflect something higher than 32MB.\n */\n// define(\'WP_MEMORY_LIMIT\', \'64M\')\n\n/**\n * Cache\n *\n * The WP_CACHE setting, if true, includes the wp-content/advanced-cache.php script, when executing wp-settings.php.\n */\n// define(\'WP_CACHE\', true);\n\n/**\n * Custom User and Usermeta Tables\n *\n * CUSTOM_USER_TABLE and CUSTOM_USER_META_TABLE are used to designated that the user and usermeta tables \n * normally utilized by WordPress are not used, instead these values/tables are used to store your user information.\n */\n// define(\'CUSTOM_USER_TABLE\', \\$table_prefix.\'my_users\');\n// define(\'CUSTOM_USER_META_TABLE\', \\$table_prefix.\'my_usermeta\');\n\n/**\n * Language Directory\n *\n * LANGDIR defines what directory the WPLANG .mo file resides. If LANGDIR is not defined WordPress looks first \n * to wp-content/languages and then wp-includes/languages for the .mo defined by WPLANG file.\n */\n// define(\'LANGDIR\', \'mylanguagedirectory\');\n\n/**\n * Save queries for analysis\n * \n * The SAVEQUERIES definition saves the database queries to a array and that array can be displayed to help \n * analyze those queries. The information saves each query, what function called it, and how long that query took to execute.\n * \n * @see http://codex.wordpress.org/Editing_wp-config.php#Save_queries_for_analysis\n */\n// define(\'SAVEQUERIES\', true);\n\n/**\n * Override of default file permissions\n *\n * The FS_CHMOD_DIR and FS_CHMOD_FILE define statements allow override of default file permissions. These two variables \n * were developed in response to the problem of the core update function failing with hosts (e.g. some Italian hosts) \n * running under suexec. If a host uses restrictive file permissions (e.g. 400) for all user files, and refuses to access \n * files which have group or world permissions set, these definitions could solve the problem. Note that the \'0755\' is an \n * octal value and is not delineated with single quotes (\'). See Also: Changing File Permissions\n */\n// define(\'FS_CHMOD_DIR\', (0755 & ~ umask()));\n// define(\'FS_CHMOD_FILE\', (0644 & ~ umask()));\n\n/**\n * FTP/SSH Constants\n *\n * To enable SSH2 as an upgrade option you will need to install the pecl SSH2 extension.\n * These methods for the WordPress core, plugin, and theme upgrades try to determine the WordPress path, as reported \n * by PHP, but symlink trickery can sometimes \'muck this up\' so if you know the paths to the various folders on the \n * server, as seen via your FTP user, you can manually define them in the wp-config.php file\n * \n * @see http://codex.wordpress.org/Editing_wp-config.php#FTP.2FSSH_Constants\n */\n// define(\'FS_METHOD\', \'ftpext\');\n// define(\'FTP_BASE\', \'/path/to/wordpress/\');\n// define(\'FTP_CONTENT_DIR\', \'/path/to/wordpress/wp-content/\');\n// define(\'FTP_PLUGIN_DIR \', \'/path/to/wordpress/wp-content/plugins/\');\n// define(\'FTP_PUBKEY\', \'/home/username/.ssh/id_rsa.pub\');\n// define(\'FTP_PRIKEY\', \'/home/username/.ssh/id_rsa\');\n// define(\'FTP_USER\', \'username\');\n// define(\'FTP_PASS\', \'password\');\n// define(\'FTP_HOST\', \'ftp.example.org:21\');\n\n/**\n * Alternative Cron\n * Use this, for example, if scheduled posts are not getting published. According to Otto\'s forum explanation, \n * "this alternate method uses a redirection approach, which makes the users browser get a redirect when the cron \n * needs to run, so that they come back to the site immediately while cron continues to run in the connection \n * they just dropped. This method is a bit iffy sometimes, which is why it\'s not the default."\n */\n// define(\'ALTERNATE_WP_CRON\', true);\n\n/**\n * Additional Defined Constants\n * Here are additional constants that can be defined, but probably shouldn\'t be. The Cookie definitions are \n * particularly useful if you have an unusual domain setup.\n */\n// define(\'COOKIEPATH\', preg_replace(\'|https?://[^/]+|i\', \'\', get_option(\'home\') . \'/\' ) );\n// define(\'SITECOOKIEPATH\', preg_replace(\'|https?://[^/]+|i\', \'\', get_option(\'siteurl\') . \'/\' ) );\n// define(\'ADMIN_COOKIE_PATH\', SITECOOKIEPATH . \'wp-admin\' );\n// define(\'PLUGINS_COOKIE_PATH\', preg_replace(\'|https?://[^/]+|i\', \'\', WP_PLUGIN_URL)  );\n// define(\'TEMPLATEPATH\', get_template_directory());\n// define(\'STYLESHEETPATH\', get_stylesheet_directory());\n// define(\'DISABLE_WP_CRON\', true);\n\n/**\n * Empty Trash\n *\n * Added with Version 2.9, this constant controls the number of days before WordPress permanently deletes \n * posts, pages, attachments, and comments, from the trash bin. The default is 30 days.\n */\n// define(\'EMPTY_TRASH_DAYS\', 30 );  // 30 days, set to 0 to disable\n\n/* That\'s all, stop editing! Happy blogging. */\n\n/** Absolute path to the WordPress directory. */\nif ( !defined(\'ABSPATH\') )\n\tdefine(\'ABSPATH\', dirname(__FILE__) . \'/\');\n\n/** Sets up WordPress vars and included files. */\nrequire_once(ABSPATH . \'wp-settings.php\');\n'
