export FZF_DEFAULT_OPS="--extended"

if $(command -v fzf >/dev/null); then

  # cd to selected directory
  fcd() {
    local dir
      dir=$(find ${1:-*} -path '*/\.*' -prune \
          -o -type d -print 2>/dev/null | fzf +m) &&
      cd "$dir"
  }

  # including hidden directories
  fhide() {
    local dir
      dir=$(find ${1:-.} -type d 2>/dev/null | fzf +m) && cd "$dir"
  }

  # open in vscode to selected directory
  fcode() {
    local dir
      dir=$(find ${1:-*} -path '*/\.*' -prune \
          -o -type d -print 2>/dev/null | fzf +m) &&
      code "$dir"
  }

  # cd into the directory of the selected file
  ffile() {
    local file
      local dir
      file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
  }

  # cd into the directory of the selected file and open it in vim
  fv() {
    local file
      local dir
      file=$(fzf +m -q "$1") && dir=$(dirname "$file") && nvim "$file"
  }

  # repeat history
  fh() {
    print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
  }

  # kill process
  fkill() {
    pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

      if [ "x$pid" != "x" ]; then
        kill -${1:-9} $pid
          fi
  }

  # checkout git branch/tag
  fgcb() {
    local tags branches target
      tags=$(
          git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}'
          ) || return
      branches=$(
          git branch --all | grep -v HEAD |
          sed "s/.* //" | sed "s#remotes/[^/]*/##" |
          sort -u | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}'
          ) || return
      target=$(
          (
           echo "$tags"
           echo "$branches"
          ) |
          fzf-tmux -l30 -- --no-hscroll --ansi +m -d "\t" -n 2
          ) || return
      git checkout $(echo "$target" | awk '{print $2}')
  }

  # checkout git commit
  fgcc() {
    local commits commit
      commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
      commit=$(echo "$commits" | fzf --tac +s +m -e) &&
      git checkout $(echo "$commit" | sed "s/ .*//")
  }

  # git commit browser
  fgshow() {
    git log --graph --color=always \
                            --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
                            fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
                            --bind "ctrl-m:execute:
                            (grep -o '[a-f0-9]\{7\}' | head -1 |
                             xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                            {}
    FZF-EOF"
  }

  # get git commit sha
  # example usage: git rebase -i `fcs`
  fgcs() {
    local commits commit
      commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
      commit=$(echo "$commits" | fzf --tac +s +m -e --ansi --reverse) &&
      echo -n $(echo "$commit" | sed "s/ .*//")
  }

  # easier way to deal with stashes
  # type fstash to get a list of your stashes
  # enter shows you the contents of the stash
  # ctrl-d shows a diff of the stash against your current HEAD
  # ctrl-b checks the stash out as a branch, for easier merging
  fgstash() {
    local out q k sha
      while out=$(
          git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
          fzf --ansi --no-sort --query="$q" --print-query \
          --expect=ctrl-d,ctrl-b
          ); do
        mapfile -t out <<<"$out"
          q="${out[0]}"
          k="${out[1]}"
          sha="${out[-1]}"
          sha="${sha%% *}"
          [[ -z "$sha" ]] && continue
          if [[ "$k" == 'ctrl-d' ]]; then
            git diff $sha
              elif [[ "$k" == 'ctrl-b' ]]; then
              git stash branch "stash-$sha" $sha
              break
          else
            git stash show -p $sha
              fi
              done
  }


  # Setting ag as the default source for fzf
  export FZF_DEFAULT_COMMAND='rg --files --follow --glob "!.git/*"'
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi
