# Automatically list out contents when changing directories
function cd {
  builtin cd "$@" && ls -al
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# `a` with no arguments opens the current directory in Atom Editor, otherwise
# opens the given location
function a() {
	if [ $# -eq 0 ]; then
		atom .;
	else
		atom "$@";
	fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Programmers logbook
function lb() {
	FILE=~/Dropbox/logbook/$(date '+%Y-%m-%d').md
	if [ ! -f $FILE ]; then
		echo "1. Consider the problem you're attempting to solve" >> ${FILE}
		echo "2. Describe your method for solving it" >> ${FILE}
		echo "3. Describe the process of carrying out the method" >> ${FILE}
		echo "4. Record what happened, and ask how it could be improved" >> ${FILE}
	fi;
	vim $FILE;
}

function til() {
	FILE=~/Dropbox/til/$(date '+%Y-%m-%d').md
	if [ ! -f $FILE ]; then
	echo "Today I Learned:" >> ${FILE}
	fi;
	vim $FILE;
}
